{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\eunch\\\\bible-chatbot\\\\frontend\\\\src\\\\components\\\\Chatbot.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport \"./Chatbot.css\"; // Ïä§ÌÉÄÏùº ÌååÏùº Î∂àÎü¨Ïò§Í∏∞\nimport { sendMessageToAPI } from \"../api\"; // Flask API Ìò∏Ï∂ú\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Chatbot = () => {\n  _s();\n  const [messages, setMessages] = useState([{\n    sender: \"bot\",\n    text: \"ÏïàÎÖïÌïòÏÑ∏Ïöî ÏÑ±ÎèÑÎãò! Î¨¥ÏóáÏù¥Îì† Ìé∏ÌïòÍ≤å Î¨ºÏñ¥Î≥¥ÏÑ∏Ïöî üòä\"\n  }]);\n  const [input, setInput] = useState(\"\");\n  const sendMessage = async () => {\n    if (!input.trim()) return;\n    const newMessages = [...messages, {\n      sender: \"user\",\n      text: input\n    }];\n    setMessages(newMessages);\n    setInput(\"\");\n    try {\n      const response = await fetch(\"http://localhost:5000/chat\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify({\n          message: input\n        })\n      });\n      const data = await response.json();\n      setMessages([...newMessages, {\n        sender: \"bot\",\n        text: data.message\n      }]);\n    } catch (error) {\n      setMessages([...newMessages, {\n        sender: \"bot\",\n        text: \"‚ö†Ô∏è ÏùëÎãµÏùÑ Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.\"\n      }]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-body\",\n      children: messages.map((msg, idx) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `chat-message ${msg.sender}`,\n        children: msg.text\n      }, idx, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-input-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: e => e.key === \"Enter\" && sendMessage(),\n        placeholder: \"\\uC9C8\\uBB38\\uC744 \\uC785\\uB825\\uD558\\uC138\\uC694...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        children: \"\\uC804\\uC1A1\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(Chatbot, \"AwfEKRiwfkS8utxi2cnrnlKsqI8=\");\n_c = Chatbot;\nexport default Chatbot;\nvar _c;\n$RefreshReg$(_c, \"Chatbot\");","map":{"version":3,"names":["React","useState","sendMessageToAPI","jsxDEV","_jsxDEV","Chatbot","_s","messages","setMessages","sender","text","input","setInput","sendMessage","trim","newMessages","response","fetch","method","headers","body","JSON","stringify","message","data","json","error","className","children","map","msg","idx","fileName","_jsxFileName","lineNumber","columnNumber","type","value","onChange","e","target","onKeyPress","key","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/eunch/bible-chatbot/frontend/src/components/Chatbot.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Chatbot.css\"; // Ïä§ÌÉÄÏùº ÌååÏùº Î∂àÎü¨Ïò§Í∏∞\r\nimport { sendMessageToAPI } from \"../api\"; // Flask API Ìò∏Ï∂ú\r\n\r\nconst Chatbot = () => {\r\n  const [messages, setMessages] = useState([\r\n    { sender: \"bot\", text: \"ÏïàÎÖïÌïòÏÑ∏Ïöî ÏÑ±ÎèÑÎãò! Î¨¥ÏóáÏù¥Îì† Ìé∏ÌïòÍ≤å Î¨ºÏñ¥Î≥¥ÏÑ∏Ïöî üòä\" },\r\n  ]);\r\n  const [input, setInput] = useState(\"\");\r\n\r\n  const sendMessage = async () => {\r\n    if (!input.trim()) return;\r\n\r\n    const newMessages = [...messages, { sender: \"user\", text: input }];\r\n    setMessages(newMessages);\r\n    setInput(\"\");\r\n\r\n    try {\r\n      const response = await fetch(\"http://localhost:5000/chat\", {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify({ message: input }),\r\n      });\r\n      const data = await response.json();\r\n      setMessages([...newMessages, { sender: \"bot\", text: data.message }]);\r\n    } catch (error) {\r\n      setMessages([\r\n        ...newMessages,\r\n        {\r\n          sender: \"bot\",\r\n          text: \"‚ö†Ô∏è ÏùëÎãµÏùÑ Í∞ÄÏ†∏Ïò¨ Ïàò ÏóÜÏäµÎãàÎã§. Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî.\",\r\n        },\r\n      ]);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <div className=\"chat-body\">\r\n        {messages.map((msg, idx) => (\r\n          <div key={idx} className={`chat-message ${msg.sender}`}>\r\n            {msg.text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <div className=\"chat-input-container\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(e) => setInput(e.target.value)}\r\n          onKeyPress={(e) => e.key === \"Enter\" && sendMessage()}\r\n          placeholder=\"ÏßàÎ¨∏ÏùÑ ÏûÖÎ†•ÌïòÏÑ∏Ïöî...\"\r\n        />\r\n        <button onClick={sendMessage}>Ï†ÑÏÜ°</button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Chatbot;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}